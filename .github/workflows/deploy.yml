name: Deploy to Production

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo (actions runner)
        uses: actions/checkout@v4

      - name: Start ssh-agent and add private key
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy to server via SSH
        env:
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_PATH: ${{ secrets.SERVER_PATH }}
          ENV_PRODUCTION: ${{ secrets.ENV_PRODUCTION }}
        run: |
          echo "Deploying to ${SERVER_USER}@${SERVER_HOST}:${SERVER_PATH}"
          
          # Ensure server_dir exists and is a git repo; clone if missing
          ssh -o StrictHostKeyChecking=no ${SERVER_USER}@${SERVER_HOST} <<'SSH_EOF'
            set -e
            # set variables (on remote)
            TARGET_DIR="${SERVER_PATH:-~/docx-nodejs}"

            if [ ! -d "$TARGET_DIR" ]; then
              echo "Target not found. Cloning repo into $TARGET_DIR"
              git clone https://github.com/prabesh-suwal/docx-nodejs.git "$TARGET_DIR"
            fi

            cd "$TARGET_DIR"

            # Reset local changes and update
            git fetch --all --prune
            git reset --hard origin/main

            # If a .env.prod file exists in repo, copy to .env; otherwise use ENV_PRODUCTION (written by actions)
            if [ -f .env.qa ]; then
              cp .env.qa .env
            elif [ -n "$ENV_PRODUCTION" ]; then
              echo "$ENV_PRODUCTION" > .env
              chmod 600 .env
            fi

            # install production deps
            npm install --production

            # restart app with pm2 (start if not running)
            pm2 restart docx-template-engine || pm2 start npm --name docx-template-engine -- start

            # save pm2 list for startup
            pm2 save
          SSH_EOF
